from typing import List

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        for i in s:
            if stack and i == ')':
                stack.pop()
                continue
            
            stack.append(i)
        
        return len(stack) == 0

    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        tuples = 1, 1
        l, r = tuples
        for i in range(1, n + 1):
            openingStack = []
            closingStack = []

            for j in range(n):
                if l > 0:
                    openingStack.append('(')
                    l -= 1
                elif openingStack[len(openingStack) - 1] == ')':
                    openingStack.append('(')
                elif openingStack[len(openingStack) - 1] == '(':
                    openingStack.append(')')
                
                if r > 0:
                    closingStack.append(')')
                    r -= 1
                elif closingStack[len(closingStack) - 1] == ')':
                    closingStack.append('(')
                elif closingStack[len(closingStack) - 1] == '(':
                    closingStack.append(')')
                
            if l == r:
                tuples = (l, r - 1)
            elif l > r:
                tuples = (r, l)
            elif r > l and i == n:    
                tuples = (i + 1, i + 1)

            l, r = tuples

        return res

print(Solution.generateParenthesis(Solution, 3))
